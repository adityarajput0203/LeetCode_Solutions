// This problem can also be solved by Hashmap ...
// Here we have sorted the array so the time comlexity becomes O(nlogn)
// space complexity : O(n)

class Solution {

    int reverse(int num) {
        int rev = 0;
        while(num>0){
            rev = rev*10 + num%10;
            num/=10;
        }
        return rev;
    }

    public int countNicePairs(int[] nums) {
        final int mod = 1000000007;
        
        int len = nums.length;
        for(int i=0;i<len;i++) nums[i] = nums[i] - reverse(nums[i]);
        Arrays.sort(nums);
        long res = 0;
        for(int i=0;i<len-1;i++) {
            long cont = 1;
            while(i<len-1 && nums[i]==nums[i+1]) {
                cont++;
                i++;
            }
            res = (res%mod + (cont*(cont-1))/2)%mod;    //if count is 2 then we can form 1 pair if count is 3 then we can form 3 pairs so used formula (n(n-1)/2)
        }
        return (int) res%mod;
    }
}
