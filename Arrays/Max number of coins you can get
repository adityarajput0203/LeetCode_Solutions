# Time Complexity : O(nlogn) due to sorting algorithm and O(n/3) is for the loop but it becomes O(n) so final complexity is O(nlogn)
# Space Complexity: O(1) as constant space is used.


class Solution {
    public int maxCoins(int[] piles) {

        int len = piles.length;

        Arrays.sort(piles);

        int x = len/3;

        int res=0;

        for(int i=x;i<len;i+=2){

            res +=piles[i];
        }

        return res;
        
        
    }
}


============== Another Approach ============

class Solution {
    public int maxCoins(int[] piles) {

        int len = piles.length;

        Arrays.sort(piles);

        int bob = 0;
        int You = len-2;
        int res=0;

        while(bob<You){
            res += piles[You];
            bob++;
            You-=2;

        }

        return res;
        
        
    }
}
